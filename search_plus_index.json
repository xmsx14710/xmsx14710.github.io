{"./":{"url":"./","title":"About","keywords":"","body":" School Timetable PLAY 基础 HonKit     "},"tools/HonKit.html":{"url":"tools/HonKit.html","title":"HonKit","keywords":"","body":" HonKit 安装Node.js HonKit教程 安装 常用基本命令 目录结构 配置book.json 设置目录与Markdown语法 导出Book 托管到Github Pages 安装Git 简单了解Git命令 操作过程 HonKit HonKit官方文档 HonKit简单介绍 HonKit是Gitbook的一个分支项目，或者说是Gitbook的替代品。可以输出PDF、WEB、EPUB等。 条件 需要Node.js环境 安装Node.js Windows安装Node.js官方指南 Step 1: 安装NVM 下载并安装nvm-windows(我这里是Windows系统) NVM全称Node.js Version Manager（Node.js版本管理器） 下载地址(来自Github)：nvm-windows Step 2: 安装Node.js 1.查看Node.js最新稳定的LTS版本 ``` nvm list available ``` 注意此时可能会报错 >【可能是代理问题】找到代理服务器地址，打开Windows设置▶网络和Internet▶代理▶使用代理服务器，然后打开编辑即可看到本机代理服务器地址。 ``` # nvm proxy [url] 即是 nvm proxy 代理服务器地址 nvm proxy http://127.0.0.1:port ``` 2.安装Node.js >nvm install ,替换为数字，即nvm install 16.15.1。 ``` nvm install 16.15.1 ``` 3.使用该版本的Node.js >nvm use [version] ``` nvm use 16.15.1 ``` HonKit教程 安装 npm install honkit --save-dev 常用基本命令 1.在package.json文件中定义init和show命令 //package.json { \"devDependencies\": { \"honkit\": \"^3.7.4\" }, \"scripts\": { \"init\": \"honkit init\", \"show\": \"honkit serve\" } } 2.构建book npm run init 3.以动态形式查看book npm run show 目录结构 --------. ' |-- book.json', ' |-- package.json', ' |-- docs', ' | |-- cover.jpg', ' | |-- GLOSSARY.md', ' | |-- LANGS.md', ' | |-- README.md', ' | |-- SUMMARY.md', ' |-- export', ' |-- _book', File Description book.js 存放书籍配置数据的Json文件 docs 存储项目文档的文件夹 README.md 书籍前言 SUMMARY.md 书籍目录 GLOSSARY.md 词典，术语列表 export 输出电子书的文件夹 cover.jpg 书籍页面图片 配置book.json 官方配置介绍 //book.json { \"root\": \"./docs\", \"title\": \"mybook\", \"language\": \"en\" } 设置目录与Markdown语法 01_设置目录 02_Markdown语法 导出Book Step 1:安装Calibre 下载地址： Calibre官方 Step 2:配置环境与关机重启 1.找到ebook-convert所在的文件夹路径，我的是C:\\Program Files\\Calibre2，把ebook-convert所在的文件夹路径添加到电脑系统环境变量。 2.添加完ebook-convert的环境变量可能不会立刻生效，建议重启电脑。 Step 3: OK！开始输出epub/pdf/mobi电子书吧 1.在package.json文件中定义epub和pdf命令。 ```json { \"devDependencies\": { \"honkit\": \"^3.7.4\" }, \"scripts\": { \"init\": \"honkit init\", \"show\": \"honkit serve\", \"epub\": \"honkit epub\", \"pdf\": \"honkit pdf\" } } ``` 2.输出EPUB ``` npm run epub .\\ .\\export\\mybook.epub ``` 3.输出PDF ``` npm run pdf .\\ .\\export\\mybook.pdf ``` 托管到Github Pages 条件 需要安装Git 资源 Git Git教程 《Github入门与实践》 安装Git 可以直接从官网下载并安装。可以参考这个详细教程。地址 简单了解Git命令 1.设置仓库（需要提前进入需要管理的项目根文件夹） git init 2.进入仓库添加或编写一个文件，把该文件进行版本控制 git add 3.提交文件 git commit -m \"提交或更改描述\" 4.查看版本控制记录或文件更改记录 git log --pretty=oneline 5.退回或恢复以前版本 git reset --hard 6.查看命令记录 git reflog 7.克隆仓库 git clone https://github.com/username/username.github.io 8.添加远程仓库 git remote add origin 9.查看所有分支 git branch 10.创建分支 git checkout -b 11.切换分支 git checkout 12.推送分支 第一次推送使用-u参数，后面不用 git push -u origin 操作过程 1.在Github新创建一个公开仓库，仓库命名规则为.github.io 我的用户名为xmsx14710，所以仓库应该起名为xmsx14710.github.io 2.创建SSH Key GitHub上连接已有仓库时的认证，是通过使用了SSH的公开密钥认证方式进行的。 创建公开密钥认证所需的SSH Key，并将其添加至GitHub。 运行这个命令，一直按回车就行。 ssh-keygen -t rsa -C \"your_email@example.com\" C:\\Users\\xxx.ssh\\id_rsa.pub 登录 Github,找到右上角的图标，打开点进里面的 Settings，再选中里面的 SSH and GPG KEYS，点击右上角的 New SSH key，然后 Title 里面随便填，再把刚才 id_rsa.pub 里面的内容复制到 Title 下面的 Key 内容框里面，最后点击 Add SSH key，这样就完成了 SSH Key 的加密。 3.创建work分支 git checkout -b work 4.推送分支 git push -u origin work 5.Pull Request(进行合并)，然后就完成了 "}}